Episode-01

what is CDN, crossorigin


npm init command is use to create react project.

**************************************************************************************************
Episode-02

The most important package in our project is bundler. webpack, parcel, vit all thease are bundller.
 buldler is buddle the app and packages to shift the code to production


webpack is use to build or create the app. but we are going to use parcel to build our app.

npm install -D parcel - command we use to install parcel and -D mean dev dependacies

Install parcel using "npx parcel index.html"

what parcel provide?
# parcel
 -build dev
 -local server
 -HMR - hot module replacement (auto browser refresh)
 -cashing - faster builds
 -image optimization
 -minifing/bundling
 -compressing
 -consistant hashing
 -code spliting
 -differancial bundling(support older browser)
 -allow HTTPs server running
 - tree shaking - remove unused code for you
 
 ********************************************************************************

Episode-03

React.createElement => is a object => when we render is object into ReactDom then it become => HtmlElement

jsx is not html. jsx is just look like html or xml but it's not html or xml. jsx is a standalone and independant.

bable is use to tanpile jsx code into react. 

If you write jsx syntax in one line that is file but if you breakdown line into multiple lines then you have to wrap it into paranthesis()

e.g - 
single line - const jsxHeading = <h1 id="heading">Namaste React ðŸš€ By Akshay Saini</h1>;

multiple line - const jsxHeading = ( <h1 id="heading">
Namaste React ðŸš€ By Akshay Saini
</h1> ) ; - paranthesis added

React Component ==>

Two ways to create Component => 1) class base component 2) functional Component

functional Component - it is nothing but javascript function.
how to create functional component ==> const HeadingComponent = () => { return <h1>Namaste React</h1>}

component composition mean use one compoent into another componet.

Swiggy - config-driven UI \

not using keys(not accetable) <<< index as a key <<<<<<<<< unique id (best practice)
use key = {} on loops

useEffect() method call on every render of that component
when dependancy array is not present then useEffect() method call on every render of that component
e.g useEffect(()=>{
    console.log("method call on every render of that component");
})

If dependancy array is empty = [] => useEffect is called on initial render only (only once)
e.g useEffect(()=>{
    console.log("useEffect is called on initial render only (only once)");
}, [])

If dependancy array is [btnName] => useEffect is called on everytime btnName updated;
e.g useEffect(()=>{
    console.log("useEffect is called on initial render only (only once)");
}, [btnName])

useState() is use to create local state variable inside function. 
create it inside component. 
never create useState inside if..else/loops/functions conditions


break down your app in smaller chunk to faster performance
    -chunking
    -code splitting
    -dynamic bundling
    -on demand loading

    use lazy() to load component on demand

Higher order component = one component take input as another component and enhance it and return it.


Lifting State Up = control child component from parent componet by passing or changing state of data


props driling - pass props in chain 
e.g you have component like in tree parent => child => babychild
e.g  pass data from parent to babychild
e.g paraentComp {pass required data as a props data } => child { pass data as props } => babychild { recived data in props}


react Context => we avoid props drilling by using context. we can use data in any componet , any level , irrespective of parent child
global level we kept the data so anybody can access that data in any component

Context consumer => s\used in class based componet to consume context data
contest provider = (used provider in app.js file)provide the value to app and ovveride
If I wrap only header inside provider then only header componet will override the value
we can wrap whole application in provider so the value will available all over applocation
we can use nested provider

For small and medium application use react context abn for big application we can use redux
application become easier to debug and use to maintain state management
redux and react are two  differnt libraries.
redux is alternative for context
We install redux into react to use it

zustand is another option for state management

redux toolkit is latest one


